import store from 'app/store';
import controller from 'app/lib/controller';
import { METRIC_UNITS, STOCK_TURNING_METHOD } from 'app/constants';

import defaultState from '../../../store/defaultState';

export class StockTurningGenerator {
    constructor(options) {
        const defaultOptions = defaultState.widgets.rotary.stockTurning.defaultOptions;

        this.options = { ...defaultOptions, ...options };
        // bitDiameter;
        // stepover;
        // feedrate;
        // stockLength;
        // startHeight;
        // finalHeight;
        // stepdown;
        // depth
        // method (needs to be computed here)
    }

    generate = () => {
        const units = store.get('workspace.units');

        const { feedrate } = this.options;

        const wcs = controller.state?.parserstate?.modal?.wcs || 'G54';

        const headerBlock = [
            '(Header)',
            '(Generated by gSender from Sienci Labs)',
            wcs,
            units === METRIC_UNITS ? 'G21 ;mm' : 'G20 ;inches',
            `G1 F${feedrate}`,
            '(Header End)',
            '\n'
        ];

        const footerBlock = [
            '\n',
            '(Footer)',
            'M5 ;Turn off spindle',
            '(End of Footer)'
        ];

        const bodyBlock = this.generateLayers([], this.options.depth, 1);

        const arr = [
            ...headerBlock,
            ...bodyBlock,
            ...footerBlock
        ];

        // So it can be interpreted correctly in the controller and visualizer
        const gcodeString = arr.join('\n');

        this.gcode = gcodeString;
    }

    generateLayers = (array, currentDepth, count) => {
        const { depth, maxDepth } = this.options;

        const layer = this.createLayer({ depth: currentDepth < maxDepth ? currentDepth : maxDepth, count });

        array.push(layer);

        if (currentDepth >= maxDepth) {
            return array.flat(); //Flatten out array at the end when all subset layers have been added
        }

        return this.generateLayers(array, currentDepth + depth, count + 1);
    }

    createLayer = () => {
        const { method } = this.options;

        const runSpiral = {
            [STOCK_TURNING_METHOD.HALF_AND_HALF_SPIRALS]: this.createHalfAndHalfSpiral,
            [STOCK_TURNING_METHOD.FULL_SPIRALS]: this.createFullSpiral,
        }[method];

        if (!runSpiral) {
            throw new Error('Spiral Method Not Defined');
        }

        const layer = runSpiral();

        return layer;
    }

    createHalfAndHalfSpiral = () => {
        const { startHeight, finalHeight, feedrate, stockLength, stepover, bitDiameter } = this.options;
        const safeHeight = this.getSafeZValue() + startHeight;
        const halfOfStockLength = (stockLength / 2).toFixed(3);
        const throttledFeedrate = (feedrate * 0.2).toFixed(3);

        const currentZValue = Number(controller.state.status.wpos.z);

        const array = [
            /** 1 */ `G0 Z${safeHeight}`,

            /** 2 */ 'G0 X0 Y0',

            /** 3 */ `G0 Z${startHeight} F${throttledFeedrate}`,

            /** 4 */ 'G91',

            /** 5 */ `G1 Y-360 Z${-(currentZValue - finalHeight)} F${(0.2 * 360 * feedrate / (currentZValue * 2 * Math.PI)).toFixed(3)}`, //ADJUSMENT NEEDED

            /** 6 */ 'G1 Y-360',

            /** 7 */ `G1 X${halfOfStockLength} Y${(0.5 * -360 * stockLength / (stepover * bitDiameter)).toFixed(3)} F${(360 * feedrate / (currentZValue * 2 * Math.PI)).toFixed(3)}`, //ADJUSMENT NEEDED

            /** 8 */ 'G1 Y-360',

            /** 9 */ 'G90',

            /** 10 */ `G0 Z${safeHeight}`,

            /** 11 */ `G0 X${stockLength} F${throttledFeedrate}`,

            /** 12 */ `G0 Z${startHeight} F${throttledFeedrate}`,

            /** 13 */ 'G91',

            /** 14 */ `G1 Y360 Z${-(currentZValue - finalHeight)} F${(0.2 * 360 * feedrate / (currentZValue * 2 * Math.PI)).toFixed(3)}`, //ADJUSMENT NEEDED

            /** 15 */ 'G1 Y360',

            /** 16 */ `G1 X${-halfOfStockLength} Y${(0.5 * 360 * stockLength / (stepover * bitDiameter)).toFixed(3)} F${(360 * feedrate / (currentZValue * 2 * Math.PI)).toFixed(3)}`,

            /** 17 */ 'G1 Y360',

            /** 18 */ 'G90',

            /** 19 */ `G0 Z${safeHeight}`,

            /** 20 */ 'G0 X0 Y0'
        ];

        return array;
    }

    createFullSpiral = () => {
        const { startHeight, finalHeight, feedrate, stockLength, stepover, bitDiameter } = this.options;
        const safeHeight = this.getSafeZValue() + startHeight;
        const halfOfStockLength = (stockLength / 2).toFixed(3);
        const throttledFeedrate = feedrate * 0.2;
        const currentZValue = controller.mpos.z;

        const array = [
            /** 1 */ `G0 Z${safeHeight}`,

            /** 2 */ 'G0 X0 Y0',

            /** 3 */ `G0 Z${startHeight} F${throttledFeedrate}`,

            /** 4 */ 'G91',

            /** 5 */ 'G1',
            `Y-360 Z-${currentZValue - finalHeight}`,
            `F${0.2 * 360 * feedrate / (currentZValue * 2 * Math.PI)}`,

            /** 6 */ 'G1 Y-360',

            /** 7 */ 'G1',
            `X${halfOfStockLength}`,
            `Y${0.5 * -360 * stockLength / (stepover * bitDiameter)}`,
            `F${360 * feedrate / (currentZValue * 2 * Math.PI)}`,

            /** 8 */ 'G1 Y-360',

            /** 9 */ 'G90',

            /** 10 */ `G0 Z${safeHeight}`,

            /** 11 */ `G0 X${stockLength} F${throttledFeedrate}`,

            /** 12 */ `G0 Z${startHeight} F${throttledFeedrate}`,

            /** 13 */ 'G91',

            /** 14 */ 'G1',
            `Y360 Z-${currentZValue - finalHeight}`,
            `F${0.2 * 360 * feedrate / (currentZValue * 2 * Math.PI)}`,

            /** 15 */ 'G1 Y360',

            /** 16 */ 'G1',
            `X-${halfOfStockLength}`,
            `Y${0.5 * 360 * stockLength / (stepover * bitDiameter)}`,
            `F${360 * feedrate / (currentZValue * 2 * Math.PI)}`,

            /** 17 */ 'G1 Y360',

            /** 18 */ 'G90',

            /** 19 */ `G0 Z${safeHeight}`,

            /** 20 */ 'G0 X0 Y0'
        ];

        return array;
    }

    getSafeZValue() {
        const workspaceUnits = store.get('workspace.units');
        const zVal = workspaceUnits === METRIC_UNITS ? 3 : 0.12;

        return zVal;
    }
}
